language: cpp

sudo: enabled
dist: bionic

branches:
  only:
  - master
  - working
  - ci

matrix:
  include:

    - name: macOS 10.14 + AppleClang 10 + Python 3 [NoGTK]
      os: osx
      osx_image: xcode11
      env: COMPILER=clang++ PYTHON=3 DISABLE_GTK=ON
      
#    - name: macOS 10.14 + GCC 8 + Python 2 [NoCairo, NoGTK]
#      os: osx
#      osx_image: xcode11
#      env: COMPILER=g++-8 PYTHON=2 DISABLE_CAIRO=ON DISABLE_GTK=ON

    - name: Ubuntu 18.04 + Clang 6 + Python 3
      os: linux
      env: COMPILER=clang++-6.0 PYTHON=3

    - name: Ubuntu 18.04 + GCC 8 + Python 2
      os: linux
      env: COMPILER=g++-8 PYTHON=2

    - name: Ubuntu 18.04 + GCC 8 + Python 3 [Coverage]
      os: linux
      env: COMPILER=g++-8 PYTHON=3 COVERAGE=ON

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then 
      if [[ "$PYTHON" == "3" ]]; then PYTHON_LIB='python'; else PYTHON_LIB=python@2; CMAKE_MACOS_PYTHON2_EXTRA_FLAGS="-DPYTHON_LIBRARY=$(python-config --prefix)/lib/libpython2.7.dylib -DPYTHON_INCLUDE_DIR=$(python-config --prefix)/include/python2.7"; fi 
      brew cask uninstall --force oclint
      if [[ -z "$DISABLE_GTK" ]]; then GTK_PKG=gtk; else GTK_PKG=""; fi
      if [[ -z "$DISABLE_CAIRO" ]]; then CAIRO_PKG=cairo; else CAIRO_PKG=""; fi
      brew install gcc@8 $PYTHON_LIB mpfr gmp $GTK_PKG $CAIRO_PKG
      export PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig
      sudo easy_install pip
      sudo pip$PYTHON install --upgrade pip
      sudo pip$PYTHON install coverage pytest
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      if [[ "$PYTHON" == "3" ]]; then PYTHON_LIB='python3'; else PYTHON_LIB=python; fi
      if [[ -z "$DISABLE_GTK" ]]; then GTK_PKG=libgtk2.0-dev; else GTK_PKG=""; fi
      if [[ -z "$DISABLE_CAIRO" ]]; then CAIRO_PKG=libcairo2-dev; else CAIRO_PKG=""; fi
      sudo apt update
      sudo apt install -y cmake pkg-config lcov $COMPILER $PYTHON_LIB-pip lib$PYTHON_LIB-dev $GTK_PKG $CAIRO_PKG libmpfr-dev
      sudo pip$PYTHON install coverage pytest
    fi

script:
  - CMAKE_ARGS="-DCMAKE_CXX_COMPILER=$COMPILER -DPYBIND11_PYTHON_VERSION=$PYTHON $CMAKE_MACOS_PYTHON2_EXTRA_FLAGS"
  - if [[ -n "$COVERAGE" ]]; then CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=ON"; else CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release"; fi
  - if [[ "$TRAVIS_BRANCH" == master ]]; then CMAKE_ARGS="$CMAKE_ARGS -DWERROR=ON"; fi
  - cmake . $CMAKE_ARGS
  - if [[ -n "$COVERAGE" ]]; then make tests; else make; fi
  - ctest -L "primary"
  - |
    if [[ -z "$COVERAGE" ]]; then
      sudo make install
      cp -Rf tutorials ~/tutorials
      cd ~/tutorials/hybrid_evolution
      cmake . $CMAKE_ARGS
      make
      ./hybrid_evolution_tutorial -v 0 > /dev/null
      cd ~/tutorials/rigorous_numerics
      cmake . $CMAKE_ARGS
      make
      ./rigorous_numerics_tutorial > /dev/null
      mkdir ~/tutorials/python
      cp -Rf python/tutorials/* ~/tutorials/python
      export LD_LIBRARY_PATH=/usr/local/lib
      cd ~/tutorials/python
      python$PYTHON tutorial.py > /dev/null
    fi
  
after_success:
  - |
    if [[ -n "$COVERAGE" ]]; then
      lcov --directory . --capture --output-file coverage.info
      lcov --remove coverage.info '/usr/*' --output-file coverage.info
      lcov --list coverage.info
      bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
    fi
