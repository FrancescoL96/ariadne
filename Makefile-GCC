all: lib tests wrap examples

VPATH = utility numeric expression algebra function geometry solvers dynamics hybrid output \
	tests wrap examples

HDR = \
	standard.h numeric.h functional.h

# ariadne.h

LIB_NUMERIC_SRC = \
	logging.cc operators.cc integer.cc rational.cc decimal.cc \
	float.cc float-approximate.cc float-validated.cc \
	real.cc \

TEST_NUMERIC_SRC = \
	test_float.cc test_validated_float.cc \


LIB_ALGEBRA_SRC = \
	vector.cc matrix.cc differential.cc algebra.cc \

TEST_ALGEBRA_SRC = \
	test_vector.cc test_matrix.cc test_multi_index.cc test_expansion.cc test_differential.cc \

LIB_FUNCTION_SRC = \
	affine.cc polynomial.cc affine_model.cc taylor_model.cc  \
	function.cc symbolic_function.cc taylor_function.cc  \

TEST_FUNCTION_SRC = \
	test_polynomial.cc test_procedure.cc test_function.cc test_taylor_model.cc test_taylor_function.cc \

LIB_SOLVER_SRC = \
	solver.cc \
	integrator.cc \
	constraint_solver.cc \
	simplex_algorithm.cc \
	linear_programming.cc \
	nonlinear_programming.cc

TEST_SOLVER_SRC = \
	test_linear_programming.cc test_nonlinear_programming.cc test_integrator.cc test_constraint_solver.cc test_solvers.cc \

LIB_GEOMETRY_SRC = \
	paver.cc \
	point.cc \
	interval.cc \
	box.cc \
	curve.cc \
	function_set.cc \
	grid_set.cc \
	affine_set.cc \
	enclosure.cc \
	drawer.cc \
	graphics.cc

TEST_GEOMETRY_SRC = \
	test_interval.cc test_function_sets.cc test_affine_sets.cc test_paving.cc test_grid_set.cc \
	test_graphics.cc \

LIB_DYNAMICS_SRC = \
	orbit.cc \
	map_evolver.cc \
	vector_field_evolver.cc

TEST_DYNAMICS_SRC = \
	test_discrete_evolution.cc \
	test_continuous_evolution.cc

LIB_EXPRESSION_SRC = \
	expression.cc \
	expression_set.cc \

TEST_EXPRESSION_SRC = \
	test_expression.cc \

LIB_HYBRID_SRC = \
	hybrid_set.cc \
	hybrid_enclosure.cc \
	hybrid_automaton-monolithic.cc \
	hybrid_automaton-composite.cc \
	hybrid_automaton-restrictive.cc \
	hybrid_simulator.cc \
	hybrid_evolver.cc \
	hybrid_reachability_analyser.cc \
	hybrid_graphics.cc

TEST_HYBRID_SRC = \
	test_hybrid_set.cc test_hybrid_automaton.cc \
	test_hybrid_simulator.cc test_hybrid_evolver.cc \
	test_hybrid_evolution.cc test_hybrid_reachability_analyser.cc test_hybrid_graphics.cc \

LIB_EXTRAS_SRC = \
	c1_taylor_function.cc \
	runge_kutta_integrator.cc \
	geometry.cc \
	textplot.cc

LIB_SRC = $(LIB_NUMERIC_SRC) $(LIB_ALGEBRA_SRC) $(LIB_FUNCTION_SRC) $(LIB_SOLVER_SRC) $(LIB_GEOMETRY_SRC) $(LIB_DYNAMICS_SRC) $(LIB_EXPRESSION_SRC) $(LIB_HYBRID_SRC)

TESTS_SRC = $(TEST_NUMERIC_SRC) $(TEST_ALGEBRA_SRC) $(TEST_FUNCTION_SRC) $(TEST_SOLVER_SRC) $(TEST_GEOMETRY_SRC) $(TEST_DYNAMICS_SRC) $(TEST_EXPRESSION_SRC) $(TEST_HYBRID_SRC)

WRAP_PYTHON_SRC = \
	ariadne_module.cc utilities.cc \
	numeric_submodule.cc linear_algebra_submodule.cc optimization_submodule.cc \
	differentiation_submodule.cc function_submodule.cc calculus_submodule.cc \
	geometry_submodule.cc solver_submodule.cc storage_submodule.cc \
	system_submodule.cc evolution_submodule.cc graphics_submodule.cc

WRAP_SRC = $(WRAP_PYTHON_SRC)

WRAP_HDR = utility.h

UNUSED_TESTS_SRC = \


EXAMPLES_SRC = \
	tutorial.cc \
	bouncingball.cc \
	watertank.cc \
	heating.cc \
	ballinabox.cc \
	watertank-compositional.cc \
	watertank-proportional.cc \
	watertank-nonlinear.cc \
	rectifier.cc \
	robotarm-verification.cc \
	robotarm-verification-essay.cc \

LIB_OBJ_DIR = obj/lib
TESTS_OBJ_DIR = obj/test
TESTS_BIN_DIR = bin
WRAP_OBJ_DIR = obj/wrap
EXAMPLES_OBJ_DIR = obj/examples
EXAMPLES_BIN_DIR = bin

ARIADNE_LIB = libariadne.so
ARIADNE_NUMERIC_LIB = libariadne-numeric.so
ARIADNE_ALGEBRA_LIB = libariadne-algebra.so
ARIADNE_FUNCTION_LIB = libariadne-function.so

DEPS = $(patsubst %.cc,.deps/%.d,$(LIB_SRC) $(LIB_EXTRAS_SRC) $(TEST_SRC) $(EXAMPLES_SRC))

PCH = $(patsubst %.h,%.h.gch,$(HDR))
LIB_OBJ = $(patsubst %.cc,$(LIB_OBJ_DIR)/%.o,$(LIB_SRC))
LIB_NUMERIC_OBJ = $(patsubst %.cc,$(LIB_OBJ_DIR)/%.o,$(LIB_NUMERIC_SRC))
LIB_ALGEBRA_OBJ = $(patsubst %.cc,$(LIB_OBJ_DIR)/%.o,$(LIB_ALGEBRA_SRC))
LIB_FUNCTION_OBJ = $(patsubst %.cc,$(LIB_OBJ_DIR)/%.o,$(LIB_FUNCTION_SRC))
LIB_EXTRAS_OBJ = $(patsubst %.cc,$(LIB_OBJ_DIR)/%.o,$(LIB_EXTRAS_SRC))
TESTS_OBJ = $(patsubst %.cc,$(TESTS_OBJ_DIR)/%.o,$(TESTS_SRC))
TESTS_BIN = $(patsubst %.cc,$(TESTS_BIN_DIR)/%,$(TESTS_SRC))
TEST_NUMERIC_BIN = $(patsubst %.cc.o,$(TESTS_BIN_DIR)/%,$(TEST_NUMERIC_SRC))
TEST_ALGEBRA_BIN = $(patsubst %.cc.o,$(TESTS_BIN_DIR)/%,$(TEST_ALGEBRA_SRC))
TEST_FUNCTION_BIN = $(patsubst %.cc,$(TESTS_BIN_DIR)/%,$(TEST_FUNCTION_SRC))
WRAP_OBJ = $(patsubst %.cc,$(WRAP_OBJ_DIR)/%.o,$(WRAP_SRC))
EXAMPLES_OBJ = $(patsubst %.cc,$(EXAMPLES_OBJ_DIR)/%.o,$(EXAMPLES_SRC))
EXAMPLES_BIN = $(patsubst %.cc,$(EXAMPLES_BIN_DIR)/%,$(EXAMPLES_SRC))

CXX = g++
#CXX = clang++
CXXFLAGS = -std=c++11 -fPIC

INCLUDE_PATHS =  -iquote.
LINK_LIBS=-lgmpxx -lgmp -lcairo -lboost_system -lboost_serialization

PYTHON_VERSION=2.7
PYTHON_INCLUDE_PATH=/usr/include/python$(PYTHON_VERSION)
PYTHON_LIBRARY=python$(PYTHON_VERSION)
PYTHON_LINK_LIBS=-lboost_python -l$(PYTHON_LIBRARY)

# Pull in dependency information
include $(PCH:.gch=.d)
include $(DEPS)

phony: all help dirs deps lib tests wrap examples check

help:
	@echo "\nDEPS"=$(DEPS)
	@echo "\nPCH"=$(PCH)
	@echo "\nLIB_SRC="$(LIB_SRC)
	@echo "LIB_OBJ="$(LIB_OBJ)
	@echo "\nTESTS_SRC="$(TESTS_SRC)
	@echo "TESTS_OBJ="$(TESTS_OBJ)
	@echo "TESTS_BIN="$(TESTS_BIN)
	@echo "\nWRAP_SRC="$(WRAP_SRC)
	@echo "WRAP_OBJ="$(WRAP_OBJ)
	@echo "\nEXAMPLES_SRC="$(EXAMPLES_SRC)
	@echo "EXAMPLES_OBJ="$(EXAMPLES_OBJ)
	@echo "EXAMPLES_BIN="$(EXAMPLES_BIN)

dirs:
	@mkdir -p .deps/
	@mkdir -p $(LIB_OBJ_DIR)
	@mkdir -p $(TESTS_OBJ_DIR)
	@mkdir -p $(WRAP_OBJ_DIR)
	@mkdir -p $(EXAMPLES_OBJ_DIR)
	@mkdir -p $(TESTS_BIN_DIR)
	@mkdir -p $(EXAMPLES_BIN_DIR)
	@mkdir -p check/

deps: dirs $(DEPS)

lib: dirs deps libariadne.so libariadne-function.so

wrap: lib $(WRAP_OBJ) ariadne.so

tests: dirs $(TESTS_BIN) $(TESTS_OBJ) lib

check: tests
	@tried=0; failed=0; red='[0;31m'; green='[0;32m'; blue='[1;34m'; black='[m'; for test_exe in $(TESTS_BIN); do test_name=`basename $$test_exe`; echo "$$test_name:"; ./$$test_exe 1>$$test_exe.log; fails=$$?; tried=$$((tried+1)); if test $$fails -gt 0; then echo $$red"FAIL $$test_name: $$fails check(s) failed"$$black; failed=$$((failed+1)); else echo $$green"PASS $$test_name"$$black; fi; done; echo "$$failed out of $$tried tests failed"; mv test_*.png bin;

examples: dirs $(EXAMPLES_BIN) $(EXAMPLES_OBJ) lib


%.h.d: %.h
	@$(CXX) $(CXXFLAGS) $(INCLUDE_PATHS) -MM $< > $*.h.d
	@sed -i 's|.*.o:|$*.h.gch:|' $*.h.d

.deps/numeric.d: include/numeric.h | dirs
	$(CXX) $(CXXFLAGS) $(INCLUDE_PATHS) -MM $< > .deps/numeric.d
	sed -i 's|.*.o:|obj/$*.o:|' .deps/$*.d

.deps/functional.d: include/functional.h | dirs
	$(CXX) $(CXXFLAGS) $(INCLUDE_PATHS) -MM $< > .deps/$*.d
	sed -i 's|.*.o:|obj/$*.o:|' .deps/$*.d

.deps/%.d: %.cc | dirs
	@echo "Making dependencies for "$<
	@$(CXX) $(CXXFLAGS) $(INCLUDE_PATHS) -I$(PYTHON_INCLUDE_PATH) -MM $< > .deps/$*.d
	@sed -i 's|.*.o:|obj/$*.o:|' .deps/$*.d


libariadne.so: $(PCH) $(LIB_OBJ)
	$(CXX) $(LIB_OBJ) $(LINK_LIBS) -shared -o libariadne.so

libariadne-numeric.so: $(PCH) $(LIB_NUMERIC_OBJ)
	$(CXX) $(LIB_NUMERIC_OBJ) $(LINK_LIBS) -shared -o libariadne-numeric.so

libariadne-algebra.so: $(PCH) $(LIB_NUMERIC_OBJ) $(LIB_ALGEBRA_OBJ)  $(LIB_OBJ_DIR)/interval.o $(LIB_OBJ_DIR)/point.o $(LIB_OBJ_DIR)/box.o
	$(CXX) $(LIB_NUMERIC_OBJ) $(LIB_ALGEBRA_OBJ)  $(LIB_OBJ_DIR)/interval.o $(LIB_OBJ_DIR)/point.o $(LIB_OBJ_DIR)/box.o  $(LINK_LIBS) -shared -o libariadne-algebra.so

libariadne-function.so: $(PCH) $(LIB_NUMERIC_OBJ) $(LIB_ALGEBRA_OBJ) $(LIB_FUNCTION_OBJ)  $(LIB_OBJ_DIR)/expression.o $(LIB_OBJ_DIR)/interval.o $(LIB_OBJ_DIR)/point.o $(LIB_OBJ_DIR)/box.o
	$(CXX) $(LIB_NUMERIC_OBJ) $(LIB_ALGEBRA_OBJ) $(LIB_FUNCTION_OBJ) $(LIB_OBJ_DIR)/expression.o $(LIB_OBJ_DIR)/interval.o $(LIB_OBJ_DIR)/point.o  $(LIB_OBJ_DIR)/box.o  $(LINK_LIBS) -shared -o libariadne-function.so

ariadne.so: $(PCH) $(WRAP_OBJ) $(LIB_EXTRAS_OBJ) libariadne.so
	$(CXX) $(WRAP_OBJ) $(LIB_EXTRAS_OBJ) $(PYTHON_LINK_LIBS) libariadne.so -shared -o ariadne.so

%.h.gch: %.h
	$(CXX) $(CXXFLAGS) $(INCLUDE_PATHS) $<

wrap/boost_python.h.gch: wrap/boost_python.h
	$(CXX) $(CXXFLAGS) $(INCLUDE_PATHS) -I$(PYTHON_INCLUDE_PATH) $<

numeric/float.o: numeric/float.cc
	$(CXX) $(CXXFLAGS) $(INCLUDE_PATHS) -c -o $@ $<

obj/lib/%.o: %.cc
	$(CXX) $(CXXFLAGS) $(INCLUDE_PATHS) -c -o $@ $<

obj/test/%.o: test/%.cc
	$(CXX) $(CXXFLAGS) $(INCLUDE_PATHS) -c -o $@ $<

obj/wrap/%.o: wrap/%.cc | wrap/boost_python.h.gch
	$(CXX) $(CXXFLAGS) $(INCLUDE_PATHS) -I$(PYTHON_INCLUDE_PATH) -c -o $@ $<

obj/examples/%.o: examples/%.cc
	$(CXX) $(CXXFLAGS) $(INCLUDE_PATHS) -c -o $@ $<

bin/%: obj/test/%.o | libariadne.so
	$(CXX) $< $(LINK_FLAGS) $(ARIADNE_LIB) $(LINK_LIBS) -o $@


bin/test_float: obj/test/test_float.o | libariadne-numeric.so
	$(CXX) $< $(LINK_FLAGS) $(ARIADNE_NUMERIC_LIB) $(LINK_LIBS) -o $@

bin/test_validated_float: obj/test/test_validated_float.o | libariadne-numeric.so
	$(CXX) $< $(LINK_FLAGS) $(ARIADNE_NUMERIC_LIB) $(LINK_LIBS) -o $@


bin/test_vector: obj/test/test_vector.o  libariadne-algebra.so
	$(CXX) $< $(LINK_FLAGS) $(ARIADNE_ALGEBRA_LIB) $(LINK_LIBS) -o $@

bin/test_matrix: obj/test/test_matrix.o  libariadne-algebra.so
	$(CXX) $< $(LINK_FLAGS) $(ARIADNE_ALGEBRA_LIB) $(LINK_LIBS) -o $@

bin/test_multi_index: obj/test/test_multi_index.o  libariadne-algebra.so
	$(CXX) $< $(LINK_FLAGS) $(ARIADNE_ALGEBRA_LIB) $(LINK_LIBS) -o $@

bin/test_expansion: obj/test/test_expansion.o  libariadne-algebra.so
	$(CXX) $< $(LINK_FLAGS) $(ARIADNE_ALGEBRA_LIB) $(LINK_LIBS) -o $@

bin/test_differential: obj/test/test_differential.o  libariadne-algebra.so
	$(CXX) $< $(LINK_FLAGS) $(ARIADNE_ALGEBRA_LIB) $(LINK_LIBS) -o $@


TEST_FUNCTION_EXTRA_OBJ = \
	$(LIB_OBJ_DIR)/box.o $(LIB_OBJ_DIR)/point.o $(LIB_OBJ_DIR)/expression.o

bin/test_polynomial: $(TESTS_OBJ_DIR)/test_polynomial.o  libariadne-function.so
	$(CXX) $< $(LINK_FLAGS) $(ARIADNE_FUNCTION_LIB) $(LINK_LIBS) -o $@

bin/test_taylor_model: $(TESTS_OBJ_DIR)/test_taylor_model.o $(LIB_OBJ_DIR)/taylor_model.o libariadne-function.so
	$(CXX) $< $(LIB_OBJ_DIR)/taylor_model.o $(LINK_FLAGS) $(ARIADNE_ALGEBRA_LIB) $(ARIADNE_NUMERIC_LIB) $(LINK_LIBS) -o $@

bin/test_procedure: $(TESTS_OBJ_DIR)/test_procedure.o  libariadne-function.so $(TEST_FUNCTION_EXTRA_OBJ)
	$(CXX) $< $(LINK_FLAGS) $(TEST_FUNCTION_EXTRA_OBJ) $(ARIADNE_FUNCTION_LIB) $(LINK_LIBS) -o $@

bin/test_function: $(TESTS_OBJ_DIR)/test_function.o  libariadne-function.so $(TEST_FUNCTION_EXTRA_OBJ)
	$(CXX) $< $(LINK_FLAGS) $(TEST_FUNCTION_EXTRA_OBJ) $(ARIADNE_FUNCTION_LIB) $(LINK_LIBS) -o $@

bin/test_taylor_function: $(TESTS_OBJ_DIR)/test_taylor_function.o  libariadne-function.so $(TEST_FUNCTION_EXTRA_OBJ)
	$(CXX) $< $(LINK_FLAGS) $(TEST_FUNCTION_EXTRA_OBJ) $(ARIADNE_FUNCTION_LIB) $(LINK_LIBS) -o $@


bin/%: obj/examples/%.o libariadne.so
	$(CXX) $< $(LINK_FLAGS) $(ARIADNE_LIB) $(LINK_LIBS) -o $@

#wrap/boost_python.h.gch: boost_python.h
#	$(CXX) $(CXXFLAGS) $< -I$(PYTHON_INCLUDE_PATH)

#.libs/numeric_submodule.o: numeric_submodule.cc boost_python.h.gch integer.h rational.h float64.h
#	$(CXX) $(CXXFLAGS) -c -o $@ $< -I$(PYTHON_INCLUDE_PATH)
