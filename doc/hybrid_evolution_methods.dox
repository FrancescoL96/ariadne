/***************************************************************************
 *            hybrid_evolution_methods.dox
 *
 *  Copyright  2004-7  Pieter Collins
 *
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/*!

\file hybrid_evolution_methods.dox
\brief Documentation on methods for evolution of hybrid systems



\page hybrid_evolution_page Hybrid Evolution Methods (Version 0.5)

\section hybrid_evolution_constraints Evolution of a hybrid system with constraints

Given an initial state \f$x_0\f$, we wish to compute the set of all points
reachable at times up to time \f$t\f$, and all points reached at exactly time \f$t\f$.
We denote by \f$\Psi(x_0,t)\f$ the set of points reached starting at \f$x_0\f$ at time \f$t\f$.

Suppose we start at a given initial state \f$x_0\f$ at time \f$t_0\f$ (which may depend on \f$x_0\f$), and undergo a sequence of events
\f$e_{i}\f$ with guards \f$g_i\f$ and resets \f$r_i\f$.
Let \f$\phi_i(x,t)\f$ denote the solution of the differential equation \f$\dot{x}=f_i(x)\f$ valid after the \f$i^\mathrm{th}\f$ event.
Let \f$t_i\f$ be the time of the \f$i^\mathrm{th}\f$ event.
Then the state at time \f$t\f$ assuming that there are \f$n\f$ events is given by
\f[ y(t) = y_n(t) = \phi_{n}(x_n,t-t_n) \f]
where
\f[ x_{m+1} = r_{m+1}(\phi_{m}(x_m,t_{m+1}-t_m)  \f]
and the times \f$t_m\f$ satisfy
\f[ t_0 \leq t_1 \leq \cdots \leq t_m \leq t . \f]
If \f$p_m(x)\leq0\f$ is a progress (time-can-pass,tcp) predicate valid in mode \f$m\f$, then we must have
\f[ p_m(\phi_{m}(x_m,[0,t_{m+1}-t_{m}])) \leq 0 \f]
and if \f$a_m(x)\geq0\f$ is the activation predicate of the \f$m^\mathrm{th}\f$ event, then we must have
\f[ a_{m}( \phi_{m-1}(x_{m-1},t_{m}-t_{m-1}) ) \geq 0 . \f]
If the event \f$e_{m}\f$ is urgent, then we have
\f[ g_{m}( \phi(x_{m-1}(x_{m-1},[0,t_{m}-t_{m-1}]))\leq 0 \wedge g_{m}( \phi(x_{m-1}(x_{m-1},0,t_{m}-t_{m-1}) = 0 . \f]

If we set \f$\delta_m=t_{m+1}-t_m\f$, then the equations reduce to
\f[ \begin{aligned}
        y_n(t) &= \phi_{n}(x_n,t-(t_0+\delta_0+\cdots+\delta_n)) \\
        x_{m+1} &= r_{m+1}(\phi_{m}(x_m,\delta_m)) \\
\end{aligned} \f]
with constraints
\f[ \begin{aligned}
        \delta_i &\geq 0; \\
        t-(t_0+\delta_0+\cdots+\delta_n) &\geq 0; \\[\jot]
        g_{m}\circ\phi(x_{m-1},[0,\delta_m]) &\leq 0 \\
        g_{m}\circ\phi(x_{m-1},\delta_m) &= 0 .
\end{aligned} \f]
This is useful, as a constraint of the form \f$\delta_m\geq0\f$ can be encoded directly in the domain of a ConstrainedImageSet, but a constraint of the form \f$t_{m+1}\geq t_m\f$ cannot be.

In the case of two events, both of which are urgent, and maximum time \f$T\f$, we can expand the conditions
\f[ y(t) = \phi_2\bigl(r_2\circ\phi_1\bigl(r_1\circ\phi_0(x_0,\delta_0),\delta_1\bigr),t-(t_0(x_0)+\delta_0+\delta_1)\bigr) \f]
with constraints
\f[ \begin{aligned}
        x_0\in B,\ t,\delta_0,\delta_1 &\in [0,T]; \\[\jot]
        t-(t_0(x_0)+\delta_0+\delta_1) &\geq 0; \\[\jot]
        g_1\circ\phi_0(x_0,[0,\delta_0]) &\leq 0; \\
        g_1\circ\phi_0(x_0,\delta_0) &= 0; \\[\jot]
        g_2\circ\phi_1(r_1\circ\phi_0(x_0,\delta_0),[0,\delta_1]) &\leq 0; \\
        g_2\circ\phi_1(r_1\circ\phi_0(x_0,\delta_0),\delta_1) &= 0.
\end{aligned} \f]

If we can solve for the crossing time \f$t_1\f$ (equivalently, the dwell time \f$\delta_0\f$) as a function of \f$x_0\f$, then we can eliminate the constraints involving \f$g_1\f$ from the system of equations.
\f[ \begin{aligned}
        x_0\in B,\ t,\delta_1 &\in [0,T]; \\[\jot]
        \delta_0(x_0) &\geq 0; \\[\jot]
        t-(t_0(x_0)+\delta_0(x_0)+\delta_1) &\geq 0; \\[\jot]
        g_2\circ\phi_1(r_1\circ\phi_0(x_0,\delta_0(x_0)),[0,\delta_1]) &\leq 0; \\
        g_2\circ\phi_1(r_1\circ\phi_0(x_0,\delta_0(x_0)),\delta_1) &= 0.
\end{aligned} \f]
Alternatively, if we can solve for \f$t_2\f$ in terms of \f$x_1\f$, then we can eliminate the constraints involving \f$g_2\f$.
\f[ \begin{aligned}
        x_0\in B,\ t,\delta_0 &\in [0,T]; \\[\jot]
        \delta_1(r_1\circ\phi_0(x_0,\delta_0)) &\geq 0; \\[\jot]
        t-(t_0+\delta_0+\delta_1(r_1\circ\phi_0(x_0,\delta_0))) &\geq 0; \\[\jot]
        g_1\circ\phi_0(x_0,[0,\delta_0]) &\leq 0; \\
        g_1\circ\phi_0(x_0,\delta_0) &= 0; \\[\jot]
\end{aligned} \f]
In general, if we can solve for \f$t_{m+1}\f$ in terms of \f$x_{m}\f$, we have
\f[ x_{m+1} = \phi_m(x_m,\delta_m(x_m)) = \phi_{m}(x_{m}(x_0,\ldots),\delta_m(x_0,\ldots)) . \f]


\section hybrid_evolution_constraint_set The ConstrainedImageSet class

An \link ImageSet ImageSet\endlink in \f$\R^n\f$ is the image of a compact box \f$C\f$ under a continuous function \f$h:\R^p\rightarrow\R^n\f$, and is given by \f[ S = \{ x\in\R^n \mid \exists\,s\in C,\ h(s)=x \} = \{ h(s) \mid s\in C \} = h(C) . \f]
An ImageSet is \em overt (even if \f$C\f$ were allowed to be unbounded), and \em compact.
A \link ConstraintSet ConstraintSet\endlink in \f$\R^n\f$ is the preimage of a box \f$D\f$ under a continuous function \f$g:\R^n\rightarrow\R^m\f$, and is given by \f[ S = \{ x\in\R^n \mid g(x) \in D \} = g^{-1}(D) . \f]
A ConstraintSet is open if \f$D\f$ is open, and closed if \f$D\f$ is closed.

In general, ImageSets are useful for representing enclosures in the evolution of a system, and ConstraintSets for regions used in the specification. However, for hybrid system evolution, we often need the properties of both kinds of set, which leads us to use ConstrainedImageSets.

A \c ConstrainedImageSet is the image of a restricted subset of a compact box under a continuous function.
\f[ S = \{ h(s) \mid s\in C \wedge g(s) \in D \} . \f]
The intersection of \f$S\f$ with \f$\{ x\mid e(x) \in E \}\f$ is then
\f[  \{ h(s) \mid s\in C \wedge g(s) \in D \wedge e\circ h(s) \in E \} . \f]
The image of \f$S\f$ under a continuous function \f$f\f$ is then
\f[ f(S) = \{ (f\circ h)(s) \mid s\in C \wedge g(s) \in D \} . \f]
However, the preimage cannot be easily computed.

It is sometimes useful to extend the class of predicates allowed to simplify the representation of guards and invariants.
Suppose \f$T=[0,t_{\max}]\f$ is a time interval, \f$D\f$ is an initial state set, and \f$\phi(x,t)\f$ denotes the flow.
Then the flow restricted to the invariant \f$p(x(t))\leq 0\f$ can be represented as
\f[ S = \{ \phi(x_0,t) \mid x_0\in D,\ t\in T \text{ and } p\circ\phi(x_0,[0,t])\leq 0 \} \f]
where \f$p\circ\phi(x_0,[0,t])\leq 0\f$ is a shorthand for
\f[ \sup\{ p(\phi(x_0,s)) \mid s\in[0,t] \} \leq 0 . \f]
If the set is supposed to represent the state after a discrete transition, then we have
\f[ S = \{ \phi_1(r_1\circ\phi_0(x_0,\delta_0),t-(t_0+\delta_0)) \mid x_0\in D,\ \delta_0,t\in T,\ t-(t_0+\delta_0)\geq 0, \ \text{ and } p_0\circ\phi_0(x_0,[0,\delta_0])\leq 0 \} . \f]
Note that here, the condition \f$p_0\circ\phi_0(x_0,[0,\delta_0])\leq 0\f$ is independent of the variable \f$t\f$, and can be most simply written as a function of the \f$n+1\f$ variables $x_0,\delta_0$ rather than the \f$n+2\f$ variables \f$x_0,\delta_0,t\f$.

We therefore order the independent variables of a constrained image set representing the evolution of a hybrid system as
\f[ x_{0} \in D \subset \R^n,\ \delta_0,\ldots,\delta_k\in[0,t_{\max}],\ t\in[0,t_{\max}] . \f]
Then, if a constraint function depends on \f$n+j\f$ variables, these are assumed to be \f$x_{0,1},\ldots,x_{0,n},\delta_0,\ldots,\delta_j\f$.
Note that in practice, some of the dwell-times \f$\delta_i\f$ may be missing if they can be solved for explicitly.






\page hybrid_evolution_page_4 Hybrid Evolution Methods (Version 0.4)

The evolution of a hybrid system takes place in a number of steps.
Each step consists of a continuous evolution, followed by at most one discrete transition.
Since the time of a discrete transition may depend on the initial state, the evolution time needs to be stored as well as the point. Both the set and evolution times are stored as a polynomial "model".


\remark

An alternative approach is to take evolution steps of a fixed time interval. However, this means that a point may undergo several discrete events in an evolution step, and the dispatching of this evolution may be hard to compute.


\section hybrid_timed_set Timed hybrid sets


Due to the need to keep track of transition times, a hybrid evolution is defined on timed hybrid sets.
A timed hybrid set consists of a model for the state and for the evolution time. The evolution time is either a rational constant or a function model (e.g. an affine model) defined on the same variables as the set model: \f[ X = c + Ge; \quad t=s+re. \f]
Where possible, an evolution will end at an exact time.

\section evolution_traces Evolution traces

An evolution dispatcher is an algorithm which computes how long the integration needs to procees, and which discrete events need to be processed.
The maximum allowable integration time is computed by evaluating all the constraint conditions and testing for the smallest integration time.
If the flow is transverse to the constraint set, then a differentiable model for the integration time can be constructed.

First, the starting set is evalutated to test if any events are (partially) activated or any invariants (partially) not satisfied.
 - If a guard is totally activated, then the event occurs immediately.
 - If an overflowing guard is partially activated, then the evolution is computed with both the event occurring immediately, and a flow taking place. The initial set may first be subdivided.
 - If a guard is partially activated but the set is repelling, then both an immediate event and a flow occur. The initial set may first be subdivided.

If the constraint with the smallest integration time is indeterminate, or depends on the continuous state, then either an upper bound is taken, or the set is subdivided.

The integration ends at a fixed time
 - If the maximum integration time is reached, or
 - If no events are activated.

The box may be subdivided if
 - The crossing is transverse, but takes longer than half the integration step.
The integration time is reduced if
 - The crossing is transverse, is started after half the integration step, but is not completed within the integration step.

If one of the smallest integration times corresponds to a guard, then the guard is activated and the flow to the guard set is computed.



\subsection upper_evolution_trace Upper evolution traces

 -# Compute a bound \f$B\f$ for the flow \f$\Phi(X,[0,h])\f$.
 -# For each constraint \f$g_e\f$:
     - Compute an approximation to \f$g(B)\f$ and determine whether the constraint is satisfied, unsatisfied or crossed.
     - For each constraint which is crossed, estimate the switching time \f$s_e(x)\f$:
        - If the crossing is transverse, give a first-order approximation to \f$s_e(x)\f$.
        - If the crossing is not transverse, give a constant lower bound for the crossing time.
 -# If \f$s_e\f$ becomes negative for some constraint \f$e\f$:
     - If the radius of \f$X\f$ exceeds \c maximum_splitting_set_radius, subdivide \f$X\f$
     - Otherwise, perform both an \f$e\f$ and \f$t\f$ step.
 -# Compute the maximum flow time \f$\tau(x)\f$ and discard all events whose time exceeds the maximum flow time.
 -# If more than one blocking event is active, and the radius of \f$X\f$ exceeds the maximum_splitting_set_radius, subdivide \f$X\f$.
 -# If only one blocking event is active, and the crossing time interval exceeds the maximum_crossing_time, subdivide \f$X\f$.

\subsection lower_evolution_trace Lower evolution traces

In a lower evolution trace, if a box needs to be split, then the evolution is terminated, unless
 - The split occurs due to an unforced event, in which case both integration and an event occur
 - The split occurs due to mapping to a guard set which is overflowing, in which case both events occur, and the C<sup>0</sup> union of the resulting boxes is taken.
The evolution is also terminated if the computation cannot determine whether an activation or an invariant is first crossed, or which of two guards is first crossed.

\section switching_time Switching time

Let \f$s(x)\f$ be the time needed to flow from \f$x\f$ to the guard set \f$g(x)=0\f$.
The switching time \f$s(x)\f$ satisfies the equation \f$g\bigr(\Phi_1(x,s(x))\bigl) = 0\f$.
Then \f$s(x)\f$ satisfies
\f[ - \nabla s(x) = \frac{\nabla g(\Phi_1(x,s(x)))\cdot D\Phi_1(x,s(x))}{\nabla g(\Phi_1(x,s(x))\cdot f_1(\Phi_1(x,s(x)))}
                  = \frac{\nabla g(y)\cdot D\Phi_1(x,s(x))}{\nabla g(y)\cdot f_1(y)}
\f]

\section forced_transitions Forced transitions

Let \f$s(x)\f$ be the time needed to flow from \f$x\f$ to the guard set \f$g(x)=0\f$.
Then the transition is given by
\f[ \Psi(x,t) = \Phi_2(r(\Phi_1(x,s(x))),t-s(x)) . \f]
and the Jacobian derivative is
\f[ D\Psi(x,t) \in D\Phi_2(B_2)\,Dr(B_1)\,D\Phi_1(B_1) \, + \, \bigl( D\Phi_2(B_2) \, Dr(B_1) \, f_1(B_1) - f_2(B_2) \bigr) \nabla s(x) . \f]
Suppose \f$s(c)\f$ is known. Then
\f[ \Psi(x,t) = \Psi(c,t) + D\Phi_2(B_2) Dr(B_1) D\Phi_1(B_1) + (f_1(B_1) - f_2(B_2)) \nabla\tau(x) r(\Phi_1(x,\tau(x))),t-\tau(x)) . \f]

The <em>saltation map</em> \f$\Psi(x,0)\f$ satisfies
\f[\begin{aligned}
    \Psi(x,0) &:= \Phi_2\bigl(r(\Phi_1(x,s(x))),-s(x)\bigr) \\
            &=  \bigr[ \Phi_2\bigl(r(\Phi_1(x,s(x))),-s(x)\bigr) - \Phi_2\bigl(r(\Phi_1(x,s(x))),0\bigr) \bigr] + \Phi_2\bigl(r(\Phi_1(x,s(x))),0\bigr) \\
            &= -\dot{\Phi}_2\bigl(r(\Phi_1(x,s(x))),\sigma\bigr)\,s(x) + r(\Phi_1(x,s(x))) \\
            &= -f_2\bigl(\Phi_2\bigl(r(\Phi_1(x,s(x))),\sigma\bigr)\bigr)\,s(x) + \bigr[ r(\Phi_1(x,s(x))) - r(\Phi_1(x,0)) \bigr] + r(\Phi_1(x,0)) \\
            &= -f_2(\zeta)\, s(x) + Dr(\Phi_1(x,\tau))\,f_1(\Phi_1(x,\tau))\,s(x) + r(x) \\
            &= -f_2(\zeta)\,s(x) + Dr(\eta)\,f(\eta)\,s(x) + r(c) + Dr(\xi)\,(x-c) \\[\jot]

            &\in r(c) + Dr(\xi)\cdot(x-c) + \bigl(Dr(B_1)\,f(B_1)-f_2(B_2)\bigr)\cdot s(x)
\end{aligned}\f]

The evolution \f$\Psi(x,t)\f$ satisfies
\f[\begin{aligned}
    \Psi(x,t) &:= \Phi_2\bigl(r(\Phi_1(x,s(x))),t-s(x)\bigr) \\
            &=  \bigr[ \Phi_2\bigl(r(\Phi_1(x,s(x))),t-s(x)\bigr) - \Phi_2\bigl(r(\Phi_1(x,s(x))),t-s(c)\bigr) \bigr] + \Phi_2\bigl(r(\Phi_1(x,s(x))),t-s(c)\bigr) \\
            &= \dot{\Phi}_2\bigl(r(\Phi_1(x,s(x))),\sigma\bigr)\,(s(c)-s(x)) + \Phi_2\bigl(r(\Phi_1(x,s(x))),t-s(c)\bigr) \\
            &= -f_2\bigl(\Phi_2\bigl(r(\Phi_1(x,s(x))),\sigma\bigr)\bigr)\,(s(c)-s(x)) + \bigr[ \Phi_2\bigl(r(\Phi_1(x,s(x))),t-s(c)\bigr) - \Phi_2\bigl(r(\Phi_1(x,s(c))),t-s(c)\bigr) \bigr] + \Phi_2\bigl(r(\Phi_1(x,s(c))),t-s(c)\bigr) \\
            &= -f_2(\zeta)\, s(x) + D\Phi_2\bigl(r(\Phi_1(x,\tau)),t-s(c)\bigr) Dr(\Phi_1(x,\tau))\,f_1(\Phi_1(x,\tau))\,(s(x)-s(c)) + \Phi_2\bigl(r(\Phi_1(x,s(c))),t-s(c)\bigr)  \\
\end{aligned}\f]
If \f$s\f$ is an approximation to \f$s(c)\f$, then the evolution \f$\Psi(x,t)\f$ can be computed by
\f[\begin{aligned}
    \Psi(x,t) &= \Phi_2\bigl(\Psi(\Phi_1(x,s),0),t-s\bigr) = \Phi_2^{t-s} \circ \Psi^0 \circ \Phi_1^s(x,t)
\end{aligned}\f]



\subsection nonsmooth_forced_transitions Nonsmooth forced transitions

If the switching time \f$s(x)\f$ is non-smooth or discontinuous, we need to rely on zero-order methods for computing the evolution.
If the switching time is bounded by \f$[-h,+h]\f$, then the saltation map is given by
\f[\begin{aligned}
    \Psi(x,0) &:= \Phi_2\bigl(r(\Phi_1(x,s(x))),-s(x)\bigr) \\[\jot]
              &\in  r(X+[-h,h]f_1(B_1))+[-h,h]f_2(B_2)
\end{aligned}\f]


\section unforced_transitions Unforced transitions

Consider a transition which can occur at any time in the interval \f$[-h,+h\f$]. Suppose \f$X\f$ is a bound for \f$x\f$, \f$B_1\f$ is a bound for \f$\Phi_1(X,[-h,h])\f$ and \f$B_2\f$ is a bound for \f$\Phi_2\bigl(r(\Phi_1(X,t)),-t\bigr)\f$ for \f$t\in[-h,+h]\f$. We have
\f[ \begin{aligned} \Psi(x,0;t) &:= \Phi_2(r(\Phi_1(x,t)),-t) \\
                                &=  \bigl[ \strut \Phi_2(r(\Phi_1(x,t)),-t) - \Phi_2(r(\Phi_1(x,t),0)) \bigr] + \Phi_2(r(\Phi_1(x,t),0)) \\
                                &=  -t\,\dot{\Phi}_2\bigl(r(\Phi_1(x,t)),\tau\bigr) + r(\Phi_1(x,t)) \\
                                &=  -t\,f_2\left(\Phi_2\bigl(r(\Phi_1(x,t)),\tau\bigr)\right) + \bigl[ r(\Phi_1(x,t)) - r(\Phi_1(x,0)) \bigr] + r(\Phi_1(x,0)) \\
                                &= -t\,f_2(\zeta) + t\,Dr(\Phi_1(x,\tau))\,f_1(\Phi_1(x,\tau)) + r(x) \\
                                &= \bigl(Dr(\eta)\,f_1(\eta)-f_2(\zeta)\bigr)\cdot t + Dr(\xi)\cdot(x-c) + r(c) \\[\jot]
                                &\in r(c) + Dr(X)\cdot(x-c) + \bigl(Dr(B_1)\,f_1(B_1) - f_2(B_2) \bigr) \cdot t
\end{aligned} \f]
If we additionally wish to flow forward a time \f$h\f$, then

\section latex_documentation Additional Documentation

For more information, see the documentation at <A HREF="../doc/evolution_step.pdf">evolution_step.pdf</A>.

*/
