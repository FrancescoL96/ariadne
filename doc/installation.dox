/***************************************************************************
 *            installation.dox
 *
 *  Copyright  2004-8  Pieter Collins
 *
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/*!

\file installation.dox
\brief Installation guide of Doxygen documentation

\page installation_page Installation Guide


\section simple_installation Simple installation of the latest stable release version

You can check out the latest release version on the Subversion repository by typing:

  \code svn checkout http://svn.parades.rm.cnr.it/ariadne/ariadne/tags/internal_release-0.5.0/ ariadne-0.5.0/ \endcode

To build the code, change to the %Ariadne directory (<tt>ariadne-0.5.0/</tt>) and type:

  \code ./bootstrap; ./configure; make; \endcode

If you are a system administrator, you can install the code by using:

  \code sudo make install \endcode

To make the code documentation, change to the %Ariadne directory and type:

  \code doxygen \endcode

See the section \ref installation_requirements for details of the extra packages needed to use %Ariadne.<br>
See the section \ref svninstallation for more details on configuring the installation process.<br>
See the section \ref alternative_versions for more up-to-date (and possibly less stable) versions.<br>
See the section \ref installation_troubleshooting for information on common problems.


\section installation_requirements Requirements

To compile %Ariadne on Linux/Unix systems, you will need:
  - A C++ compiler (we recommend g++ version 4.3.1 or higher, which can be downloaded from <a href="http://gcc.gnu.org/">http://gcc.gnu.org</a>)
  - A version of the 'make' utility (such as GNU make <a href="http://www.gnu.org/software/make/">http://www.gnu.org/software/make/</a>)

  - The Boost C++ Libraries (version 1.35.0 or higher) <a href="http://www.boost.org/">http://www.boost.org/</a>.

On Fedora Linux systems, you will need the rpm packages make, libtool, gcc-c++, boost-devel (and dependencies).


To compile %Ariadne on Microsoft Windows systems, please contact the developers for advice.


\subsection installation_optional_packages Optional packages

To enable optional support for multiple-precision arithmetic, you will need:
  - The GNU Multiple-Precision Library (version 4.1.2 or higher)  <a href="http://www.swox.com/gmp/">http://www.swox.com/gmp/</a>.
  - MPFR Library (version 2.2.1 or higher) <a href="http://www.mpfr.org/">http://www.mpfr.org/</a>.

To use the plotting facilities, you will need:
  - cairo (version 1.7 or higher) <a href="http://www.cairographics.org/">http://www.cairographics.org/</a>.

To enable pop-up draphics windows, you will need:
  - the GTK+ toolkit (version 2.0 or higher) <a href="http://www.gtk.org/">http://www.gtk.org/</a>.

For the Python interface, you will also need:
  - Python (version 2.4 or higher) <a href="http://www.python.org/">http://www.python.org/</a>.

To make the source code documentation, you will need:
  - Doxygen (version 1.4.6 or higher is recommended)
       <a href="http://www.stack.nl/~dimitri/doxygen/">http://www.stack.nl/~dimitri/doxygen/</a>.

To build the source code from the Subversion repository, you will also need
  - GNU autotools
      - autoconf <a href="http://www.gnu.org/software/autoconf/">http://www.gnu.org/software/autoconf/</a>.
      - automake <a href="http://www.gnu.org/software/automake/">http://www.gnu.org/software/automake/</a>.
      - libtool <a href="http://www.gnu.org/software/libtool/">http://www.gnu.org/software/libtool/</a>.
  - GNU m4 <a href="http://www.gnu.org/software/m4/">http://www.gnu.org/software/m4/</a>.
  - Perl <a href="http://www.perl.org/">http://www.perl.org/</a>.

All the above packages are available for Linux/Unix, Apple OSX and Microsoft Windows operating systems.
They are standard packages for most Linux distributions. In general, you should install "development" versions e.g. cairo-devel or cairo-dev.


\section svninstallation Installation from the Subversion repository

If installing from the Subversion repository, change to the main %Ariadne directory (e.g. <tt>ariadne/trunk/</tt>) and type
\code
  ./bootstrap
  ./configure
  make
  make install
\endcode

\section tarballinstallation Installation from a source tarball

Unpack the source tarball and change to the main directory
\code
  tar -xzf ariadne-x.y.z.tar.gz
  cd ariadne-x.y.z
\endcode
From main source directory, type
\code
  ./configure
  make
  make install
\endcode
The default installation directory for the library is /usr/local/lib/ (or /usr/local/lib64 on 64-bit machines), and for the Python interface is /usr/lib/python/2.x/site-packages/.
These defaults can be changed by using the --prefix flag to ./configure, as in
\code
  ./configure --prefix=$HOME
\endcode

<!-->
By default, the C++ library is compiled with support for double-precision floating-point numbers (64 bit). The flags \c --enable-mp can be used to enable support for multiple-precision floating-point numbers.
For example, to configure with multiple-precision floating-point support enabled, use
\code
  ./configure --enable-mp
\endcode
</!-->

To compile with debugging support, use
\code
  ./configure CXXFLAGS='-g -O0'
\endcode

\section alternative_versions Alternate versions

The main line of %Ariadne development is contained in the <tt>trunk/</tt> of the Subversion repository.
The trunk version should usually compile, and pass the unit tests, but not all the examples may work correctly or within a reasonable time.
This version can be obtained using:
  \code svn checkout http://svn.parades.rm.cnr.it/ariadne/ariadne/trunk/ ariadne-trunk/ \endcode

New development will usually be contained in the <tt>working/</tt> branch of the Subversion repository.
Note that code in this version is highly unstable and may not be usable, though it should give an up-to-date impression of current innovations.
This version can be obtained using:
  \code svn checkout http://svn.parades.rm.cnr.it/ariadne/ariadne/branches/working/ ariadne-working/ \endcode

Ongoing bug-fixes and improvements can be found in the <tt>version-0.5.1</tt> branch of the Subversion repository.
This version can be obtained using:
  \code svn checkout http://svn.parades.rm.cnr.it/ariadne/ariadne/branches/version-0.5.1/ ariadne-0.5/ \endcode

Stable (internal) releases can be found in the <tt>tags/</tt> section of the Subversion repository.
To check-out internal release x.y.z into local directory <tt>ariadne-x.y.z</tt> use:
  \code svn checkout http://svn.parades.rm.cnr.it/ariadne/ariadne/tags/internal_release-x.y.z/ ariadne-x.y.z/ \endcode

The entire directory tree can be obtained using:
  \code svn checkout http://svn.parades.rm.cnr.it/ariadne/ariadne/ ariadne/ \endcode
Any directory with the file \c configure.ac is a main %Ariadne source directory and the tool can be built using the instructions in the section on \ref svninstallation.

\section installation_troubleshooting Troubleshooting

- If you don't have write-access to your machine's system files, you can install %Ariadne locally by configuring with the command:
    \code ./configure --prefix=$HOME \endcode
  Header files will be places in the <tt>$HOME/include/</tt> directory, and library files in <tt>$HOME/lib/</tt>.
  Alternatively, you can run %Ariadne from the source (download) directory without installation. You may need to set your system paths correctly in order to find local include paths and library paths.

- If you obtain errors of the form \"<tt>warning: dereferencing pointer ‘...’ does break strict-aliasing rules</tt>\" using GCC, consider compiling using the <tt>-fno-strict-aliasing</tt> flag:
 \code ./configure CXXFLAGS="-fno-strict-aliasing" \endcode

- Make sure the library (and Python interface, if used) can be found by the system! On Unix/Linux systems, if you are installing to you user (home) directory, you may need to add the following (or similar) to your \c .bashrc file:
   \code       export PYTHONPATH+=:$HOME/lib/python2.6/site-packages:$HOME/lib64/python2.6/site-packages \endcode

*/
