/***************************************************************************
 *            modules.dox
 *
 *  Copyright  2006  Pieter Collins
 *
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#ifndef _ARIADNE_MODULES_H
#define _ARIADNE_MODULES_H

/*! \file modules.dox
 * \brief Documentation for %Ariadne modules.
 * \anchor modules
 */

/*! \brief The main %Ariadne namespace.
 */
namespace Ariadne {
}

/*!\defgroup UserModules UserModules
 */

/*! \defgroup ExpressionModule Expression Module
 *  \ingroup UserModules
 *  \brief Expressions in named variables.
 *
 * In this module, expressions in named variables can defined. These form the
 * building blocks for defining hybrid systems.
 */

/*!\defgroup ExpressionSetSubModule Expression Sets
 * \ingroup ExpressionModule
 * \brief Sets described by giving constraints on variables and expressions.
 */

/*!\defgroup SystemModule System Module
 * \ingroup UserModules
 * \brief Abstract base classes for system interface, and some commonly used systems.
 *
 * Systems fall into three basic classes, namely <em>discrete-time
 * systems</em>, <em>continuous-time systems</em>, and <em>hybrid-time
 * systems</em>, which are a combination of dicrete-time and hybrid-time
 * systems. There is a further subdivision into
 * <em>dynamical systems</em>, which are deterministic, <em>multivalued
 * systems</em>, which are nondeterministic, and
 * <em>control systems</em> in which control inputs and noise may be present.
 *
 * A system is defined by an algorithm to approximate the image of a basic set,
 * and possibly to approximate the derivative over a basic set.
 * It is <em>not</em> the purpose of the classes in the system module to
 * compute the image of denotable sets; this is the purpose of the Evaluation
 * module.
 *
 * See the page on \ref function_evaluation_page for more information.
 */

/*! \defgroup AnalysisModule Analysis Module
 *  \ingroup UserModules
 *  \brief Classes for computing the evolution and analysing the behaviour of a system.
 */




/*! \defgroup CoreModules Core Modules
 *
 *  \brief Core classes and functions used for both system specification and internal computation.
 */




/*!\defgroup NumericModule Numeric Module
 * \ingroup CoreModules
 * \brief Numerical types and intervals.
 * \details In this module, we define %Ariadne's base numerical types, and interval
 * arithmetic. The main classes are \ref Ariadne::Integer "Integer",
 * \ref Ariadne::Rational "Rational", \ref Ariadne::Float "Float",
 * \ref Ariadne::Interval "Interval" and \ref Ariadne::Real "Real" classes.
 *
 * Rounded operations on \ref Ariadne::Float "Float" are provided using the \c _down
 * and \c _up suffixes. Approximate arithmetic without control of the
 * rounding mode can be specified by the approx rounding type, and exact
 * arithmetic (the default) can be specified explicitly using the exact
 * rounding type.
 *
 * Note that to prevent accidental calls to approximate functions, all
 * non-exact operations must yield a \a Float value.
 *
 * We use the following abbreviations for template parameters
 * for classes and concepts in this module:
 *  - \b Q: Rational
 *  - \b F: Float
 *  - \b I: Interval
 *  - \b A: Rational, Interval
 *  - \b R: Rational, Float
 *  - \b X: Rational, Float, Interval
 *
 * \internal The above template names are currently not used consistently
 *
 * See the page \ref realnumbertypes for more information.
 */

/*!
 * \defgroup LinearAlgebraModule Linear Algebra Module
 * \ingroup CoreModules
 * \brief %Vector, matrix and tensor classes, solution of linear equations,
 * LU and QR factorisation and singular value decomposition.
 *
 * \details Basic types are represented by the classes \ref Ariadne::Vector "Vector"
 * and \ref Ariadne::Matrix "Matrix".
 * Specialist types include PermutationMatrix and DiagonalMatrix.
 * Operations such as vector sums and matrix-vector products are
 * accessed using operator overloading. Expression templates and slices are
 * used to improve efficiency.
 *
 * More complicated matrix operations, such as factorisation, are represented
 * by sub-classes which contain the factorised data, from which the factors
 * can easily be extracted.
 *
 * Currently sparse and structured (e.g. triangular, symmetric, banded)
 * matrices are not directly supported, except to the extent needed for the
 * matrix decomposition classes, or for derivative tensors.
 *
 * All classes support exact arithmetic and interval arithmetic.
 *
 * We use the following abbreviations for template parameters for classes
 * in this module:
 *  - \b SCA: Scalar
 *  - \b VEC: Vector
 *  - \b MX: Matrix
 *
 */

/*!\defgroup DifferentiationModule  Differentiation Module
 * \ingroup CoreModules
 * \brief Support for automatic differentiation using Taylor expansions
 *
 * In this core module are the classes used to compute derivatives
 * of functions.
 */

/*! \defgroup FunctionModule Function Module
 *  \ingroup CoreModules
 *  \brief Functions on Euclidean space.
 *
 * In this module are the classes used to represent concrete functions in Euclidean space.
 * These functions can be used as the building blocks for geometric objects and dynamic systems.
 *
 *  \defgroup FunctionModelSubModule Function Models
 *  \ingroup FunctionModule
 *  \brief Validated and approximate functions on bounded domains in Euclidean space.
 */


/*!\defgroup GeometryModule Geometry Module
 * \ingroup CoreModules
 * \brief Geometric calculus module.
 *
 * In this module are the classes used to represent sets and approximations to
 * sets. Sets fall into two classes, <em>basic sets</em> which are typically
 * simple sets which form a base for the topology, and <em>denotable sets</em>
 * which are unions of basic sets.
 *
 * The fundamental geometric operations are \c contains(Set,State),
 * \a disjoint(Set,Set) and subset(Set,Set). All these return \a tribool values,
 * where the indeterminate value is used to indicate a result which is either
 * not robust (e.g. the boundaries of two sets intersect but their interiors do
 * not) or which cannot be computed to the given precision.
 *
 * %Ariadne uses <em>fuzzy basic sets</em>, which are sets of sets defined using
 * interval data, to store intermediate results if these cannot be computed
 * exactly. These sets can be converted to ordinary basic sets by over- or
 * under-approximation. Alternatively, the fundamental binary predicates can
 * be computed directed for the fuzzy set types.
 * Denotable sets are never fuzzy.
 *
 * We use the following abbreviations for template parameters for classes in this module:
 *  - \b S: SetInterface
 *  - \b BS: BasicSet
 *  - \b DS: DenotableSet
 *  - \b LS: ListSet
 *  - \b GS: GridSet
 *  - \b PTS: PartitionTreeSet
 *
 * See \ref geometry_page for more information.
 *
 * \defgroup SetInterfaceSubModule Set interfaces
 * \ingroup GeometryModule
 * \brief Interfaces for various classes of sets.
 *
 * \defgroup ExactSetSubModule Exact sets
 * \ingroup GeometryModule
 * \brief Sets which can be defined exactly.
 *
 * Any set can be uniquely specified by the results geometric predicates involving
 * rectangles. Exact sets are defined by an interface in which these predicates are
 * defined.
 *
 * \defgroup BasicSetSubModule Basic Sets
 * \ingroup GeometryModule
 * \brief Basic set classes.
 *
 * Basic sets are so-called because they form a base for the topology of the
 * space. Typically, basic sets are (a subclass of) convex polytopes or
 * ellipsoids. Basic sets must support the fundamental geometric predicates,
 * both within the class and with the Rectangle class. Additionally, basic sets
 * may support the optional geometric operations, but only if the class of set
 * under consideration is closed under that operation. The result may be
 * exactly computable if it involves no arithmetic (e.g. intersection of two
 * rectangles) or may need to be represented by a fuzzy set (e.g. Minkowski sum
 * of two rectangles).
 *
 * \defgroup ListSetSubModule List Sets
 * \ingroup GeometryModule
 * \brief Denotable sets based on arbitrary lists of elements.
 *
 * \defgroup HybridSetSubModule Hybrid sets
 * \ingroup GeometryModule
 * \brief Sets in spaces with many components.
 *
 * The state space of a hybrid system consists of many disconnected components,
 * one for each discrete mode. Hybrid sets consist of a union of many different
 * sets, one for each component of the state space.
 */


/*!\defgroup StorageModule Storage Module
 * \ingroup CoreModules
 * \brief Classes for representing discretised sets
 *
 * A <em>subdivision tree</em> is a binary tree describing a subdivision of
 * a rectangle (<em>unit cell</em>) into smaller cells. The subdivision is
 * described by a SubdivisionSequence giving the coordinate of the ith
 * subdivision, and a BinaryTree giving the subdivisions.
 *
 * e.g. The cell described by the SubdivisionSequence '[0,0,1,...]' and the
 * BinaryWord '[0,1,1]' is given by subdividing the unit interval twice in the
 * \f$x_0\f$ direction, first taking the lower half, and then the upper half,
 * and by subdividing once in the \f$x_1\f$ direction, taking the upper half.
 * This gives the dyadic rectangle '[0.25,0.5]x[0.5,1.0]'.
 *
 * Denotable sets are unions of basic sets of a simple kind, typically boxes.
 * In addition to the fundamental geometric predicates, denotable sets must also
 * support iteration through their elements, and union (join) with basic sets
 * and denotable sets of the same kind.
 */


/*!\defgroup SolverModule Solver Module
 * \ingroup CoreModules
 * \brief Classes and functions for solving algebraic equations, differential equations and optimisation problems (including constraint feasibility problems).
 *
 * The LinearProgram class supports construction and solution of linear
 * programming problems. Tests for feasibility only are also possible. The
 * computations are performed by a BLAS/LAPACK style lpslv() routing.
 */

/*!\defgroup OptimisationSubModule Optimisation Submodule
 * \ingroup CoreModules
 * \brief Classes and functions for solving linear and nonlinear programming problems.
 *
 * The LinearProgram class supports construction and solution of linear
 * programming problems. Tests for feasibility only are also possible. The
 * computations are performed by a BLAS/LAPACK style lpslv() routing.
 */


/*! \defgroup OutputModules Output Modules
 *
 *  \defgroup GraphicsModule Graphical Output
 *  \ingroup OutputModules
 *  \brief Graphical output.
 *
 *  \defgroup SerializationModule Serialization
 *  \ingroup OutputModules
 *  \brief Input/Output to a text or html archive.
 *
 *  \defgroup CHomPModule Homology Output
 *  \ingroup OutputModules
 *  \brief Homology Output.
 */


/*! \defgroup HybridModules Hybrid System Modules
 */

#endif /* _ARIADNE_MODULES_H */
