/***************************************************************************
 *            taylor_calculus.dox
 *
 *  Copyright  2009  Pieter Collins
 *
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/*! 
 * \file taylor_calculus.dox
 * \brief Documentation Ariadne's Taylor calculus
 */

namespace Ariadne {

/*!


\page taylor_calculus_page Taylor Calculus

On this page, we explain how to use Ariadne's internal Taylor calculus via the Python interface.




\section taylor_calculus_polynomial Polynomial Calculus

\dontinclude examples/tutorial.py

A Polynomial expression can be created by using the PolynomialExpression.variable(n,j), which creates the polynomial \f$p(x)=x_j\f$ for \f$x\in\R^n\f$:

\skipline PolynomialExpression.variable

We can define a shorthand for creating Polynomial expressions:

\skipline def p
\until return

The standard arithmetical operations are available for Polynomial expressions:

\skipline +p
\until i*p




\section taylor_calculus_taylor Taylor Calculus

\dontinclude examples/tutorial.py

The core type is a TaylorExpression, which is a polynomial representation \a p of a function \a f on a box \a D in Euclidean space with uniform error \a e:
\f[ f(x) = p(x)\pm e \text{ for } x\in D . \f]

The simplest way to create a Taylor expression is to use the named constructor variable(D,j), which constructs a Taylor expression for the function \f$f(x)=x_j\f$ on the domain \f$D\f$:

\skipline TaylorExpression.variable

It is possible to create a list of all \f$n\f$ variables on \f$D\in\R^n\f$ by using the named constructor variables(D):
\skipline TaylorExpression.variables

To save typing, give shorthand names to the variables:
\skipline x
\until z

We can even make a shorthand function to create new Taylor expressions.
\skipline def t
\until return

The standard arithmetical operations are available between Taylor expressions. In all cases, the result enclosed all possible functions represented by the arguments.
\skipline +

Mixed operations with Float and Interval scalars are also supported:
\skipline +
\until c/x
\skipline +
\until i/x

Inplace operations are supported where they can be implemented efficiently:
\skipline x+=y
\until x/=

The comparison functions \c min, \c max and \c abs are provided.
abs(x) returns x if is (provably) positive on the entire domain, -x if x is (provably) negative on the entire domain, and the interval constant abs(x.range()) otherwise. max(x,y) can be implemented as ( x + y + abs(x-y) )/2

\skipline min

The standard %Ariadne arithmetical functions \c neg, \c rec, \c sqr and \c pow are provided. 
The \c rec function throws a DivideByZeroException if zero lies in the codomain of \a x, as does \c pow(x,n) for negative \a n.

\skipline neg

The standard algebraic and transcendental functions are also given. The \c sqrt and \c log functions throw a DomainException if the codomain of the expression is not positive. The \c tan function throws a DivideByZeroException if \a cos(x) becomes zero over the domain.

\skipline sqrt
\until tan

The main use of the Taylor calculus is to perform composition of functions and solution of equations. 

We can combine TaylorExpression objects into TaylorFunction objects using the join method.

\skipline join

We can compose TaylorFunction objects \f$f\f$ and \f$g\f$ to obtain the function \f$f\circ g\f$.
The codomain of \a g must be a subset of the domain of \a f.

\skipline assert
\skipline compose


We can also compose a TaylorExpression \f$f\f$ and TaylorFunction \f$g\f$ to obtain a Taylor expression \f$f\circ g\f$.

\skipline TaylorExpression
\until compose

We can also compose Expression interface objects and FunctionInterface objects.






\until # End







\dontinclude examples/tutorial.py

\section taylor_calculus_other Other Functionality

As well as the Taylor calculus, %Ariadne also includes methods for interval arithmetic, linear algebra and automatic differentiation.

\subsection taylor_calculus_numeric Numerical Types

If the GNU Multiple-precision library is installed, %Ariadne supports an Integer number class.

\skipline Integer

If the GNU Multiple-precision library is installed, %Ariadne supports a Rational number class.

\skipline Rational

%Ariadne uses C++/Python's built-in floating-point type to provide a Float class.

\skipline Float

%Ariadne supplies an Interval class supporting outward-rounded interval arithmetic

\skipline Interval

Note that when creating an interval from floating-point values, the numerical literals are first converted to the nearest exactly representable number by the interpreter.
\skipline Interval
\skipline Interval

To obtain an outwardly-rounded interval, use the Rational class if possible.
\skipline Interval
\skipline Interval

\subsection taylor_calculus_linear_algebra Linear Algebra

*/

} // namespace Ariadne