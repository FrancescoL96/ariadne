function henon
  output Real[2] h;
  input Real x;
  input Real y;
  input Real a;
  input Real b;
algorithm
  h[0]:=a-x*x-b*y;
  h[1]:=x;
end henon;

EoF

[0.25,0.5,1.5,0.375]

function square
  output Real y;
  input Real x;
algorithm
  y:=x*x;
end square;

EoF

[3]

function square
  output Real y;
  input Real x;
algorithm
  y:=x^2;
end square;

EoF

[3]


function dtan
  output Real y;
  input Real x;
algorithm
  y:=1/(1+x^2);
end dtan;

EoF

[2]

function twod
  output Real[2] y;
  input Real[3] x;
algorithm
  y[0] := x[0] - x[1] + x[2];
  y[1] := (x[0] - x[1]) * x[2] + x[1];
end twod;

EoF

[1,2,3]

function constantfunction
  output Real y;
  input Real x;
  constant Real a=5;
  constant Real b=23;
algorithm
  y := a+b;
end constantfunction;

EoF

[1]

function constantfunction
  output Real[3] y;
  input Real x;
  constant Real a=5;
  constant Real b=23;
algorithm
  y[0] := a;
  y[1] := b;
  y[2] := x;
end constantfunction;

EoF

[1]

function temporariesfunction
  output Real y;
  input Real x;
protected
  Real[2] t;
  Real f;
  constant Real o=1.0;
algorithm
  f:=5;
  t[0]:=x^2;
  t[1]:=x^3;
  y:=(o+t[0]-1+t[1])/(f+t[0]+2*t[1]);
end temporariesfunction;

EoF

[2]

