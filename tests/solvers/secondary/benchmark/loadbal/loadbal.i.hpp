#pragma once

Void
TestOptimiser::benchmark_loadbal()
{
  List<EffectiveScalarMultivariateFunction> x =
    EffectiveScalarMultivariateFunction::coordinates(31);
  EffectiveScalarMultivariateFunction f(

    ((x[20] / ((Real(100.0)) - x[20])) / Real(102.80000000000001)) +
    ((x[21] / ((Real(100.0)) - x[21])) / Real(102.80000000000001)) +
    ((x[22] / ((Real(20.0)) - x[22])) / Real(102.80000000000001)) +
    ((x[23] / ((Real(100.0)) - x[23])) / Real(102.80000000000001)) +
    ((x[24] / ((Real(100.0)) - x[24])) / Real(102.80000000000001)) +
    ((x[25] / ((Real(20.0)) - x[25])) / Real(102.80000000000001)) +
    ((x[26] / ((Real(20.0)) - x[26])) / Real(102.80000000000001)) +
    ((x[27] / ((Real(100.0)) - x[27])) / Real(102.80000000000001)) +
    ((x[28] / ((Real(20.0)) - x[28])) / Real(102.80000000000001)) +
    ((x[29] / ((Real(20.0)) - x[29])) / Real(102.80000000000001)) +
    ((x[30] / ((Real(20.0)) - x[30])) / Real(102.80000000000001)) +
    ((x[0] / ((Real(1000.0)) - ((Real(80.0)) * x[0] + (Real(20.0)) * x[1]))) /
     Real(6.425000000000001)) +
    ((x[0] / ((Real(1000.0)) - ((Real(20.0)) * x[0] + (Real(80.0)) * x[1]))) /
     Real(25.700000000000003)) +
    ((x[2] / ((Real(1000.0)) - ((Real(80.0)) * x[2] + (Real(20.0)) * x[3]))) /
     Real(6.425000000000001)) +
    ((x[2] / ((Real(1000.0)) - ((Real(20.0)) * x[2] + (Real(80.0)) * x[3]))) /
     Real(25.700000000000003)) +
    ((x[4] / ((Real(1000.0)) - ((Real(80.0)) * x[4] + (Real(20.0)) * x[5]))) /
     Real(6.425000000000001)) +
    ((x[4] / ((Real(1000.0)) - ((Real(20.0)) * x[4] + (Real(80.0)) * x[5]))) /
     Real(25.700000000000003)) +
    ((x[1] / ((Real(1000.0)) - ((Real(80.0)) * x[1] + (Real(20.0)) * x[0]))) /
     Real(6.425000000000001)) +
    ((x[1] / ((Real(1000.0)) - ((Real(20.0)) * x[1] + (Real(80.0)) * x[0]))) /
     Real(25.700000000000003)) +
    ((x[3] / ((Real(1000.0)) - ((Real(80.0)) * x[3] + (Real(20.0)) * x[2]))) /
     Real(6.425000000000001)) +
    ((x[3] / ((Real(1000.0)) - ((Real(20.0)) * x[3] + (Real(80.0)) * x[2]))) /
     Real(25.700000000000003)) +
    ((x[5] / ((Real(1000.0)) - ((Real(80.0)) * x[5] + (Real(20.0)) * x[4]))) /
     Real(6.425000000000001)) +
    ((x[5] / ((Real(1000.0)) - ((Real(20.0)) * x[5] + (Real(80.0)) * x[4]))) /
     Real(25.700000000000003)) +
    ((x[14] /
      ((Real(1000.0)) - ((Real(80.0)) * x[14] + (Real(20.0)) * x[15]))) /
     Real(6.425000000000001)) +
    ((x[14] /
      ((Real(1000.0)) - ((Real(20.0)) * x[14] + (Real(80.0)) * x[15]))) /
     Real(25.700000000000003)) +
    ((x[16] /
      ((Real(1000.0)) - ((Real(80.0)) * x[16] + (Real(20.0)) * x[17]))) /
     Real(6.425000000000001)) +
    ((x[16] /
      ((Real(1000.0)) - ((Real(20.0)) * x[16] + (Real(80.0)) * x[17]))) /
     Real(25.700000000000003)) +
    ((x[18] /
      ((Real(1000.0)) - ((Real(80.0)) * x[18] + (Real(20.0)) * x[19]))) /
     Real(6.425000000000001)) +
    ((x[18] /
      ((Real(1000.0)) - ((Real(20.0)) * x[18] + (Real(80.0)) * x[19]))) /
     Real(25.700000000000003)) +
    ((x[15] /
      ((Real(1000.0)) - ((Real(80.0)) * x[15] + (Real(20.0)) * x[14]))) /
     Real(6.425000000000001)) +
    ((x[15] /
      ((Real(1000.0)) - ((Real(20.0)) * x[15] + (Real(80.0)) * x[14]))) /
     Real(25.700000000000003)) +
    ((x[17] /
      ((Real(1000.0)) - ((Real(80.0)) * x[17] + (Real(20.0)) * x[16]))) /
     Real(6.425000000000001)) +
    ((x[17] /
      ((Real(1000.0)) - ((Real(20.0)) * x[17] + (Real(80.0)) * x[16]))) /
     Real(25.700000000000003)) +
    ((x[19] /
      ((Real(1000.0)) - ((Real(80.0)) * x[19] + (Real(20.0)) * x[18]))) /
     Real(6.425000000000001)) +
    ((x[19] /
      ((Real(1000.0)) - ((Real(20.0)) * x[19] + (Real(80.0)) * x[18]))) /
     Real(25.700000000000003)) +
    ((x[8] / ((Real(1000.0)) - ((Real(80.0)) * x[8] + (Real(20.0)) * x[9]))) /
     Real(6.425000000000001)) +
    ((x[8] / ((Real(1000.0)) - ((Real(20.0)) * x[8] + (Real(80.0)) * x[9]))) /
     Real(25.700000000000003)) +
    ((x[9] / ((Real(1000.0)) - ((Real(80.0)) * x[9] + (Real(20.0)) * x[8]))) /
     Real(6.425000000000001)) +
    ((x[9] / ((Real(1000.0)) - ((Real(20.0)) * x[9] + (Real(80.0)) * x[8]))) /
     Real(25.700000000000003)) +
    ((x[10] /
      ((Real(1000.0)) - ((Real(80.0)) * x[10] + (Real(20.0)) * x[11]))) /
     Real(6.425000000000001)) +
    ((x[10] /
      ((Real(1000.0)) - ((Real(20.0)) * x[10] + (Real(80.0)) * x[11]))) /
     Real(25.700000000000003)) +
    ((x[11] /
      ((Real(1000.0)) - ((Real(80.0)) * x[11] + (Real(20.0)) * x[10]))) /
     Real(6.425000000000001)) +
    ((x[11] /
      ((Real(1000.0)) - ((Real(20.0)) * x[11] + (Real(80.0)) * x[10]))) /
     Real(25.700000000000003)) +
    ((x[7] / ((Real(10000.0)) - ((Real(80.0)) * x[7] + (Real(20.0)) * x[6]))) /
     Real(6.425000000000001)) +
    ((x[7] / ((Real(10000.0)) - ((Real(20.0)) * x[7] + (Real(80.0)) * x[6]))) /
     Real(25.700000000000003)) +
    ((x[6] / ((Real(10000.0)) - ((Real(80.0)) * x[6] + (Real(20.0)) * x[7]))) /
     Real(6.425000000000001)) +
    ((x[6] / ((Real(10000.0)) - ((Real(20.0)) * x[6] + (Real(80.0)) * x[7]))) /
     Real(25.700000000000003)) +
    ((x[12] /
      ((Real(10000.0)) - ((Real(80.0)) * x[12] + (Real(20.0)) * x[13]))) /
     Real(6.425000000000001)) +
    ((x[12] /
      ((Real(10000.0)) - ((Real(20.0)) * x[12] + (Real(80.0)) * x[13]))) /
     Real(25.700000000000003)) +
    ((x[13] /
      ((Real(10000.0)) - ((Real(80.0)) * x[13] + (Real(20.0)) * x[12]))) /
     Real(6.425000000000001)) +
    ((x[13] /
      ((Real(10000.0)) - ((Real(20.0)) * x[13] + (Real(80.0)) * x[12]))) /
     Real(25.700000000000003))

  );

  ExactBoxType D = ExactBoxType{
    { 0.0, +inf },  { 0.0, +inf },  { 0.0, +inf },  { 0.0, +inf },
    { 0.0, +inf },  { 0.0, +inf },  { 0.0, +inf },  { 0.0, +inf },
    { 0.0, +inf },  { 0.0, +inf },  { 0.0, +inf },  { 0.0, +inf },
    { 0.0, +inf },  { 0.0, +inf },  { 0.0, +inf },  { 0.0, +inf },
    { 0.0, +inf },  { 0.0, +inf },  { 0.0, +inf },  { 0.0, +inf },
    { 0.0, 99.99 }, { 0.0, 99.99 }, { 0.0, 19.99 }, { 0.0, 99.99 },
    { 0.0, 99.99 }, { 0.0, 19.99 }, { 0.0, 19.99 }, { 0.0, 99.99 },
    { 0.0, 19.99 }, { 0.0, 19.99 }, { 0.0, 19.99 }
  };
  EffectiveVectorMultivariateFunction g = {
    Real(20.0) * x[0] + Real(80.0) * x[1] - Real(999.99),
    Real(80.0) * x[0] + Real(20.0) * x[1] - Real(999.99),
    Real(20.0) * x[2] + Real(80.0) * x[3] - Real(999.99),
    Real(80.0) * x[2] + Real(20.0) * x[3] - Real(999.99),
    Real(20.0) * x[4] + Real(80.0) * x[5] - Real(999.99),
    Real(80.0) * x[4] + Real(20.0) * x[5] - Real(999.99),
    Real(20.0) * x[8] + Real(80.0) * x[9] - Real(999.99),
    Real(80.0) * x[8] + Real(20.0) * x[9] - Real(999.99),
    Real(20.0) * x[10] + Real(80.0) * x[11] - Real(999.99),
    Real(80.0) * x[10] + Real(20.0) * x[11] - Real(999.99),
    Real(20.0) * x[14] + Real(80.0) * x[15] - Real(999.99),
    Real(80.0) * x[14] + Real(20.0) * x[15] - Real(999.99),
    Real(20.0) * x[16] + Real(80.0) * x[17] - Real(999.99),
    Real(80.0) * x[16] + Real(20.0) * x[17] - Real(999.99),
    Real(20.0) * x[18] + Real(80.0) * x[19] - Real(999.99),
    Real(80.0) * x[18] + Real(20.0) * x[19] - Real(999.99),
    Real(20.0) * x[6] + Real(80.0) * x[7] - Real(9999.99),
    Real(80.0) * x[6] + Real(20.0) * x[7] - Real(9999.99),
    Real(20.0) * x[12] + Real(80.0) * x[13] - Real(9999.99),
    Real(80.0) * x[12] + Real(20.0) * x[13] - Real(9999.99),
    x[0] - x[1] - x[20] + Real(95.0),
    x[2] - x[3] - x[21] + Real(95.0),
    x[4] - x[5] - x[22] + Real(19.0),
    -x[0] + x[1] - x[2] + x[3] - x[4] + x[5] - x[6] + x[7] - x[23] + Real(70.0),
    x[6] - x[7] - x[8] + x[9] - x[10] + x[11] - x[12] + x[13] - x[24] +
      Real(70.0),
    x[8] - x[9] - x[25] + Real(19.0),
    x[10] - x[11] - x[26] + Real(19.0),
    x[12] - x[13] - x[14] + x[15] - x[16] + x[17] - x[18] + x[19] - x[27] +
      Real(70.0),
    x[14] - x[15] - x[28] + Real(19.0),
    x[16] - x[17] - x[29] + Real(19.0),
    x[18] - x[19] - x[30] + Real(19.0)

  };

  ExactBoxType C = { { 0.0, +inf }, { 0.0, +inf }, { 0.0, +inf }, { 0.0, +inf },
                     { 0.0, +inf }, { 0.0, +inf }, { 0.0, +inf }, { 0.0, +inf },
                     { 0.0, +inf }, { 0.0, +inf }, { 0.0, +inf }, { 0.0, +inf },
                     { 0.0, +inf }, { 0.0, +inf }, { 0.0, +inf }, { 0.0, +inf },
                     { 0.0, +inf }, { 0.0, +inf }, { 0.0, +inf }, { 0.0, +inf },
                     { 0.0, 0.0 },  { 0.0, 0.0 },  { 0.0, 0.0 },  { 0.0, 0.0 },
                     { 0.0, 0.0 },  { 0.0, 0.0 },  { 0.0, 0.0 },  { 0.0, 0.0 },
                     { 0.0, 0.0 },  { 0.0, 0.0 },  { 0.0, 0.0 } };
  ExactBoxType testC = {
    { -0.00000001, +inf },         { -0.000000001, +inf },
    { -0.000000001, +inf },        { -0.000000001, +inf },
    { -0.000000001, +inf },        { -0.000000001, +inf },
    { -0.000000001, +inf },        { -0.000000001, +inf },
    { -0.000000001, +inf },        { -0.000000001, +inf },
    { -0.000000001, +inf },        { -0.000000001, +inf },
    { -0.000000001, +inf },        { -0.000000001, +inf },
    { -0.000000001, +inf },        { -0.000000001, +inf },
    { -0.000000001, +inf },        { -0.000000001, +inf },
    { -0.000000001, +inf },        { -0.000000001, +inf },
    { -0.000000001, 0.000000001 }, { -0.000000001, 0.000000001 },
    { -0.000000001, 0.000000001 }, { -0.000000001, 0.000000001 },
    { -0.000000001, 0.000000001 }, { -0.000000001, 0.000000001 },
    { -0.000000001, 0.000000001 }, { -0.000000001, 0.000000001 },
    { -0.000000001, 0.000000001 }, { -0.000000001, 0.000000001 },
    { -0.000000001, 0.000000001 }
  };

  optimiser->initial_guess = { 0,    0,    0,    0,    0,    0,    0,    0,
                               0,    0,    0,    0,    0,    0,    0,    0,
                               0,    0,    0,    0,    95.0, 95.0, 19.0, 70.0,
                               70.0, 19.0, 19.0, 70.0, 19.0, 19.0, 19.0 };
  optimiser->use_initial_guess = true;

  float elapsed_time = 0;
  clock_t s_time = clock();
  FloatBoundsVector x_optimal = optimiser->minimise(f, D, g, C);
  clock_t e_time = clock();

  elapsed_time = static_cast<float>(e_time - s_time) / CLOCKS_PER_SEC;
  std::cout << "Elapsed time: " << elapsed_time << " sec\n";

  std::cout << "f(x_optimal): " << f(x_optimal) << "\n";
  ARIADNE_TEST_BINARY_PREDICATE(element, x_optimal, D);
  ARIADNE_TEST_BINARY_PREDICATE(element, g(x_optimal), testC);
}